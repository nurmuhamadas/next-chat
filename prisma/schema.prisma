generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(uuid(7))
  username        String    @unique @db.VarChar(100)
  email           String    @unique @db.VarChar(100)
  password        String    @db.VarChar(100)
  emailVerifiedAt DateTime? @map("email_verified_at")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  sessions              Session[]
  verificationToken     VerificationToken?
  passwordResetToken    PasswordResetToken?
  logs                  UserLog[]
  profile               Profile?
  setting               Setting?
  initiatedPrivateChats PrivateChat[]       @relation("initiator")
  receivedprivateChats  PrivateChat[]       @relation("receiver")
  ownedGroups           Group[]
  groupOptions          GroupOption[]
  groups                GroupMember[]
  ownedChannels         Channel[]
  channelOptions        ChannelOption[]
  channels              ChannelSubscriber[]
  messages              Message[]
  messageReads          MessageRead[]
  reactions             Reaction[]
  blockingUsers         BlockedUser[]       @relation("blockingUser")
  blockedUsers          BlockedUser[]       @relation("blockedUser")
  rooms                 Room[]              @relation("owner")

  @@map("users")
}

model Session {
  id        String   @id @default(uuid(7))
  token     String   @unique
  deviceId  String   @map("device_id")
  userAgent String   @map("user_agent")
  userId    String   @map("user_id")
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user     User      @relation(fields: [userId], references: [id])
  userLogs UserLog[]

  @@unique([deviceId, userId])
  @@map("sessions")
}

model VerificationToken {
  email     String   @unique
  token     String
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [email], references: [email])

  @@map("verification_tokens")
}

model PasswordResetToken {
  email     String   @unique
  token     String
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [email], references: [email])

  @@map("password_reset_tokens")
}

enum LogActivity {
  LOGIN
  LOGOUT
  RESET_PASSWORD
  LOGIN_NEW_DEVICE
  CREATE_PROFILE
  UPDATE_PROFILE
  UPDATE_SETTING
  UPDATE_PRIVATE_CHAT_OPTION
  CREATE_GROUP
  UPDATE_GROUP
  UPDATE_GROUP_OPTION
  JOIN_GROUP
  LEFT_GROUP
  ADD_GROUP_MEMBER
  REMOVE_GROUP_MEMBER
  CREATE_CHANNEL
  UPDATE_CHANNEL
  UPDATE_CHANNEL_OPTION
  SUBCRIBE_CHANNEL
  UNSUBSCRIBE_CHANNEL
  SEND_MESSAGE
  UPDATE_MESSAGE
  DELETE_MESSAGE
  REACT_MESSAGE
  BLOCK_USER
  UNBLOCK_USER
}

model UserLog {
  id          String      @id @default(uuid(7))
  userId      String      @map("user_id")
  sessionId   String      @map("session_id")
  activity    LogActivity
  description String?
  createdAt   DateTime    @default(now()) @map("created_at")

  user    User    @relation(fields: [userId], references: [id])
  session Session @relation(fields: [sessionId], references: [id])

  @@map("user_logs")
}

enum Gender {
  MALE
  FEMALE
}

model Profile {
  id         String    @id @default(uuid(7))
  name       String    @db.VarChar(100)
  gender     Gender
  bio        String?
  imageUrl   String?   @map("image_url")
  userId     String    @unique @map("user_id")
  lastSeenAt DateTime? @map("last_seen_at")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id])

  @@map("profiles")
}

enum DBTimeFormat {
  HALF_DAY
  FULL_DAY
}

enum Language {
  en_US
  id_ID
}

enum Notification {
  PRIVATE
  GROUP
  CHANNEL
}

model Setting {
  id              String         @id @default(uuid(7))
  userId          String         @unique @map("user_id")
  timeFormat      DBTimeFormat   @default(HALF_DAY) @map("time_format")
  language        Language       @default(en_US)
  notifications   Notification[]
  enable2FA       Boolean        @default(false) @map("enable_2FA")
  showLastSeen    Boolean        @default(true) @map("show_last_seen")
  allowAddToGroup Boolean        @default(false) @map("allow_add_to_group")
  createdAt       DateTime       @default(now()) @map("created_at")
  updatedAt       DateTime       @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id])

  @@map("settings")
}

model PrivateChat {
  id            String   @id @default(uuid(7))
  user1Id       String   @map("user1_id")
  user2Id       String   @map("user2_id")
  lastMessageId String?  @unique @map("last_message_id")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  user1       User     @relation("initiator", fields: [user1Id], references: [id])
  user2       User     @relation("receiver", fields: [user2Id], references: [id])
  lastMessage Message? @relation("lastMessagePrivate", fields: [lastMessageId], references: [id])

  usersOption PrivateChatOption[]
  messages    Message[]
  rooms       Room[]

  @@unique([user1Id, user2Id])
  @@map("private_chats")
}

model PrivateChatOption {
  id            String    @id @default(uuid(7))
  privateChatId String    @unique @map("private_chat_id")
  userId        String    @map("user_id")
  notification  Boolean
  deletedAt     DateTime? @map("deleted_at")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  privateChat PrivateChat? @relation(fields: [privateChatId], references: [id])

  @@map("private_chat_options")
}

enum GroupType {
  PUBLIC
  PRIVATE
}

model Group {
  id            String    @id @default(uuid(7))
  name          String    @db.VarChar(100)
  description   String?
  type          GroupType
  imageUrl      String?   @map("image_url")
  ownerId       String    @map("owner_id")
  inviteCode    String    @unique @map("invite_code") @db.Char(10)
  lastMessageId String?   @unique @map("last_message_id")
  deletedAt     DateTime? @map("deleted_at")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  owner       User     @relation(fields: [ownerId], references: [id])
  lastMessage Message? @relation("lastMessageGroup", fields: [lastMessageId], references: [id])

  membersOption GroupOption[]
  members       GroupMember[]
  rooms         Room[]
  messages      Message[]

  @@unique([ownerId, name])
  @@map("groups")
}

model GroupOption {
  id           String   @id @default(uuid(7))
  groupId      String   @map("group_id")
  userId       String   @map("user_id")
  notification Boolean
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  group Group @relation(fields: [groupId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  @@unique([groupId, userId])
  @@map("group_options")
}

model GroupMember {
  id        String    @id @default(uuid(7))
  groupId   String    @map("group_id")
  userId    String    @map("user_id")
  isAdmin   Boolean   @default(false) @map("is_admin")
  leftAt    DateTime? @map("left_at")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  group Group @relation(fields: [groupId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  @@map("group_members")
}

enum ChannelType {
  PUBLIC
  PRIVATE
}

model Channel {
  id            String      @id @default(uuid(7))
  name          String      @db.VarChar(100)
  description   String?
  type          ChannelType
  imageUrl      String?     @map("image_url")
  ownerId       String      @map("owner_id")
  inviteCode    String      @unique @map("invite_code") @db.Char(10)
  lastMessageId String?     @unique @map("last_message_id")
  deletedAt     DateTime?   @map("deleted_at")
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")

  owner       User     @relation(fields: [ownerId], references: [id])
  lastMessage Message? @relation("lastMessageChannel", fields: [lastMessageId], references: [id])

  subscribersOption ChannelOption[]
  subscribers       ChannelSubscriber[]
  rooms             Room[]
  messages          Message[]

  @@unique([ownerId, name])
  @@map("channels")
}

model ChannelOption {
  id           String   @id @default(uuid(7))
  channelId    String   @map("channel_id")
  userId       String   @map("user_id")
  notification Boolean
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  channel Channel @relation(fields: [channelId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@unique([channelId, userId])
  @@map("channel_options")
}

model ChannelSubscriber {
  id             String    @id @default(uuid(7))
  channelId      String    @map("channel_id")
  userId         String    @map("user_id")
  isAdmin        Boolean   @default(false) @map("is_admin")
  unsubscribedAt DateTime? @map("unsubscribed_at")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")

  channel Channel @relation(fields: [channelId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@map("channel_subscribers")
}

enum RoomType {
  PRIVATE
  GROUP
  CHANNEL
}

model Room {
  id            String    @id @default(uuid(7))
  type          RoomType
  ownerId       String    @map("owner_id")
  privateChatId String?   @map("private_chat_id")
  groupId       String?   @map("group_id")
  channelId     String?   @map("channel_id")
  pinnedAt      DateTime? @map("pinned_at")
  archivedAt    DateTime? @map("archived_at")
  deletedAt     DateTime? @map("deleted_at")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  owner       User         @relation("owner", fields: [ownerId], references: [id])
  privateChat PrivateChat? @relation(fields: [privateChatId], references: [id])
  group       Group?       @relation(fields: [groupId], references: [id])
  channel     Channel?     @relation(fields: [channelId], references: [id])

  @@map("rooms")
}

enum MessageStatus {
  DEFAULT
  DELETED_FOR_ME
  DELETED_FOR_ALL
  DELETED_BY_ADMIN
}

model Message {
  id                String        @id @default(uuid(7))
  message           String?
  senderId          String        @map("sender_id")
  privateChatId     String?       @map("private_chat_id")
  groupId           String?       @map("group_id")
  channelId         String?       @map("channel_id")
  parentMessageId   String?       @map("parent_message_id")
  parentMessageName String?       @map("parent_message_name") @db.VarChar(100)
  parentMessageText String?       @map("parent_message_text")
  originalMessageId String?       @map("original_message_id")
  isEmojiOnly       Boolean       @default(false) @map("is_emoji_only")
  status            MessageStatus @default(DEFAULT)
  createdAt         DateTime      @default(now()) @map("created_at")
  updatedAt         DateTime      @updatedAt @map("updated_at")

  sender           User         @relation(fields: [senderId], references: [id])
  privateChat      PrivateChat? @relation(fields: [privateChatId], references: [id])
  group            Group?       @relation(fields: [groupId], references: [id])
  channel          Channel?     @relation(fields: [channelId], references: [id])
  repliedMessage   Message?     @relation("parentMessage", fields: [parentMessageId], references: [id])
  forwardedMessage Message?     @relation("originalMessage", fields: [originalMessageId], references: [id])

  messageReplies     Message[]     @relation("parentMessage")
  messageForwards    Message[]     @relation("originalMessage")
  messageReads       MessageRead[]
  reactions          Reaction[]
  attachments        Attachment[]
  lastMessagePrivate PrivateChat?  @relation("lastMessagePrivate")
  lastMessageChannel Channel?      @relation("lastMessageChannel")
  lastMessageGroup   Group?        @relation("lastMessageGroup")

  @@map("messages")
}

model MessageRead {
  id                String   @id @default(uuid(7))
  userId            String   @map("user_id")
  lastMessageReadId String   @map("last_message_read_id")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  user            User    @relation(fields: [userId], references: [id])
  lastMessageRead Message @relation(fields: [lastMessageReadId], references: [id])

  @@map("message_reads")
}

model Reaction {
  id        String   @id @default(uuid(7))
  reaction  String
  userId    String   @map("user_id")
  messageId String   @map("message_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user    User    @relation(fields: [userId], references: [id])
  message Message @relation(fields: [messageId], references: [id])

  @@unique([userId, messageId])
  @@map("reactions")
}

enum AttachmentType {
  IMAGE
  AUDIO
  VIDEO
  PDF
  AUDIO_RECORD
  OTHER
}

model Attachment {
  id          String         @id @default(uuid(7))
  name        String
  type        AttachmentType
  size        Int
  url         String
  downloadUrl String         @map("download_url")
  messageId   String         @map("message_id")
  createdAt   DateTime       @default(now()) @map("created_at")
  updatedAt   DateTime       @updatedAt @map("updated_at")

  message Message @relation(fields: [messageId], references: [id])

  @@map("attachments")
}

model BlockedUser {
  id            String    @id @default(uuid(7))
  userId        String    @map("user_id")
  blockedUserId String    @map("blocked_user_id")
  unblockedAt   DateTime? @map("unblocked_at")
  createdAt     DateTime  @default(now()) @map("created_at")

  user        User @relation("blockedUser", fields: [userId], references: [id])
  blockedUser User @relation("blockingUser", fields: [blockedUserId], references: [id])

  @@map("blocked_users")
}
